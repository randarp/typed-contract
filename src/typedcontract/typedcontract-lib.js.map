{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap e3a6bcbd762a78acd3f6","webpack:///./TypedContract/type-validators/base-validator.js","webpack:///./TypedContract/Contract/Contract.ts","webpack:///./TypedContract/type-validators/any-validator.js","webpack:///./TypedContract/type-validators/array-validator.js","webpack:///./TypedContract/type-validators/boolean-validator.js","webpack:///./TypedContract/type-validators/number-validator.js","webpack:///./TypedContract/type-validators/string-validator.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,0C;;;;;;;ACnCA,0CAA0C;AAC1C,gEAAgE;;;AAEhE,gDAAsE;AACtE,iDAAwE;AACxE,gDAAsE;AACtE,+CAAoE;AACpE,6CAAgE;AAEhE;IAAA;IAsDA,CAAC;IA3CU,yBAAM,GAAb,UAAc,YAAgB,EAAE,IAAuB;QAAvB,uCAAuB;QAEnD,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC,IAAI,kCAAe,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;YAClG,MAAM,CAAC,IAAI,oCAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;YACjG,MAAM,CAAC,IAAI,kCAAe,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,YAAY,KAAK;YACpC,YAAY,YAAY,KAAK,KAAK,IAAI;eACnC,YAAY,YAAY,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,gCAAc,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,4BAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;IACL,CAAC;IAYM,0BAAO,GAAd,UAAe,aAAiB,EAAE,IAAuB;QAAvB,uCAAuB;QAErD,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7F,MAAM,CAAC,IAAI,kCAAe,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACrG,MAAM,CAAC,IAAI,oCAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;YACpG,MAAM,CAAC,IAAI,kCAAe,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,YAAY,KAAK;YACrC,aAAa,YAAY,KAAK,KAAK,IAAI;YACvC,aAAa,YAAY,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,gCAAc,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,4BAAY,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC;IACL,CAAC;IACL,eAAC;AAAD,CAAC;AAtDY,4BAAQ;AAwDrB;;GAEG;AAEQ,gBAAQ,GAAoB,IAAI,QAAQ,EAAE,CAAC;;;;;;;;ACrEtD;AACA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,yC;;;;;;;ACzFA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yCAAyC,EAAE;AAC3F;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yCAAyC,EAAE;AAC3F;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,2C;;;;;;;ACtVA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,6C;;;;;;;ACnJA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,4C;;;;;;;AC5QA;AACA;AACA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,4C","file":"./TypedContract/typedcontract-lib.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedcontract\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedcontract\"] = factory();\n\telse\n\t\troot[\"typedcontract\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e3a6bcbd762a78acd3f6","\"use strict\";\r\nexports.__esModule = true;\r\n/**\r\n * Encapsulates any validators that apply to every type and state used by the validation chain.\r\n */\r\nvar BaseValidator = (function () {\r\n    function BaseValidator(variableValue, variableName) {\r\n        var self = this;\r\n        self._variableValue = variableValue;\r\n        if (variableName && variableName.length > 0) {\r\n            self._variableName = variableName;\r\n        }\r\n        else {\r\n            self._variableName = \"The variable\";\r\n        }\r\n    }\r\n    /**\r\n     * value returns the value that was passed into the contract\r\n     * @returns {T}\r\n     * @constructor\r\n     */\r\n    BaseValidator.prototype.value = function () {\r\n        return this._variableValue;\r\n    };\r\n    /**\r\n     * name returns the variable name that was passed into the contract\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    BaseValidator.prototype.name = function () {\r\n        return this._variableName;\r\n    };\r\n    return BaseValidator;\r\n}());\r\nexports.BaseValidator = BaseValidator;\r\n//# sourceMappingURL=base-validator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/type-validators/base-validator.js\n// module id = 0\n// module chunks = 0","/// <reference path=\"../icontract.d.ts\" />\r\n/// <reference path=\"../type-validators/type-validators.d.ts\" />\r\n\r\nimport { StringValidator } from \"../type-validators/string-validator\";\r\nimport { BooleanValidator } from \"../type-validators/boolean-validator\";\r\nimport { NumberValidator } from \"../type-validators/number-validator\";\r\nimport { ArrayValidator } from \"../type-validators/array-validator\";\r\nimport { AnyValidator } from \"../type-validators/any-validator\";\r\n\r\nexport class Contract implements IContractStatic {\r\n    public checks(precondition:string): IStringValidator;\r\n    public checks(precondition:string, name:string): IStringValidator;\r\n    public checks(precondition:boolean): IBooleanValidator;\r\n    public checks(precondition:boolean, name:string): IBooleanValidator;\r\n    public checks(precondition:number): INumberValidator;\r\n    public checks(precondition:number, name:string): INumberValidator;\r\n    public checks(precondition:any[]): IArrayValidator;\r\n    public checks(precondition:any[], name:string): IArrayValidator;\r\n    public checks(precondition:any, name:string): IAnyValidator;\r\n    public checks(precondition:any): IAnyValidator;\r\n    public checks(precondition:any, name:string = undefined):any {\r\n\r\n        if (typeof precondition === \"string\" || precondition === null || precondition === undefined) {\r\n            return new StringValidator(precondition, name);\r\n        } else if (typeof precondition === \"boolean\" || precondition === null || precondition === undefined) {\r\n            return new BooleanValidator(precondition, name);\r\n        } else if (typeof precondition === \"number\" || precondition === null || precondition === undefined) {\r\n            return new NumberValidator(precondition, name);\r\n        } else if (precondition instanceof Array ||\r\n            precondition instanceof Array === null\r\n            || precondition instanceof Array === undefined) {\r\n            return new ArrayValidator(precondition, name);\r\n        } else {\r\n            return new AnyValidator(precondition, name);\r\n        }\r\n    }\r\n\r\n    public ensures(postcondition:string): IStringValidator;\r\n    public ensures(postcondition:string, name:string): IStringValidator;\r\n    public ensures(postcondition:boolean): IBooleanValidator;\r\n    public ensures(postcondition:boolean, name:string): IBooleanValidator;\r\n    public ensures(postcondition:number): INumberValidator;\r\n    public ensures(postcondition:number, name:string): INumberValidator;\r\n    public ensures(postcondition:any[]): IArrayValidator;\r\n    public ensures(postcondition:any[], name:string): IArrayValidator;\r\n    public ensures(postcondition:any, name:string): IAnyValidator;\r\n    public ensures(postcondition:any):IAnyValidator;\r\n    public ensures(postcondition:any, name:string = undefined):any {\r\n\r\n        if (typeof postcondition === \"string\" || postcondition === null || postcondition === undefined) {\r\n            return new StringValidator(postcondition, name);\r\n        } else if (typeof postcondition === \"boolean\" || postcondition === null || postcondition === undefined) {\r\n            return new BooleanValidator(postcondition, name);\r\n        } else if (typeof postcondition === \"number\" || postcondition === null || postcondition === undefined) {\r\n            return new NumberValidator(postcondition, name);\r\n        } else if (postcondition instanceof Array ||\r\n            postcondition instanceof Array === null ||\r\n            postcondition instanceof Array === undefined) {\r\n            return new ArrayValidator(postcondition, name);\r\n        } else {\r\n            return new AnyValidator(postcondition, name);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nCreate a module level variable that exposes the functionality for typed contract\r\n */\r\n\r\nexport var contract: IContractStatic = new Contract();\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/source-map-loader!./~/tslint-loader??ref--1!./TypedContract/Contract/Contract.ts","/// <reference path=\"type-validators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_validator_1 = require(\"./base-validator\");\r\nvar AnyValidator = (function (_super) {\r\n    __extends(AnyValidator, _super);\r\n    function AnyValidator(variableValue, variableName) {\r\n        return _super.call(this, variableValue, variableName) || this;\r\n    }\r\n    /**\r\n     *\r\n     * isNotNull checks if the type any variable is not null\r\n     * @throws a ReferenceError if the any is null\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.isNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNull checks if the any variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.isNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isDefined checks if the any variable is defined\r\n     * @throws ReferenceError if the any variable jis not defined\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.isDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isUndefined checks if the any variable is undefined\r\n     * @throws a ReferenceError if the any variable is undefined\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.isUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isNullOrUndefined checks if the any variable is not null or undefined\r\n     * @throws ReferenceError if the any variable is null or undefined\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.isNullOrUndefined = function () {\r\n        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return AnyValidator;\r\n}(base_validator_1.BaseValidator));\r\nexports.AnyValidator = AnyValidator;\r\n//# sourceMappingURL=any-validator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/type-validators/any-validator.js\n// module id = 2\n// module chunks = 0","/// <reference path=\"type-validators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_validator_1 = require(\"./base-validator\");\r\nvar ArrayValidator = (function (_super) {\r\n    __extends(ArrayValidator, _super);\r\n    function ArrayValidator(variableValue, variableName) {\r\n        return _super.call(this, variableValue, variableName) || this;\r\n    }\r\n    /**\r\n     *\r\n     * isNull Checks if the array variable is null\r\n     * @throws ReferenceError if the variable is not null\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotNull checks if the array variable is not null\r\n     * @throws ReferenceError if the variable is null\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isDefined checks if the array variable is defined\r\n     * @throws ReferenceError if the array variable is undefined\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isUndefined checks if the array variable is undefined\r\n     * @throws ReferenceError if the array variable is defined\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isUndefined = function () {\r\n        if (this._variableValue !== undefined) {\r\n            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isNullOrUndefined checks if the array variable is not null or undefined\r\n     * @throws ReferenceError if the array variable is null or undefined\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isEqualTo checks if the array variable is equal to the index of the parameter passed into the function as an argument\r\n     * @throws RangeError if the array variable is not equal to the index given parameter passed into the function\r\n     * @param compareTo, index\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isEqualTo = function (compareTo, index) {\r\n        if (!compareTo.length || this._variableValue.length === 0) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue[index] !== compareTo[index]) {\r\n            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotEqualTo checks if the array variable is not equal to the index of the parameter passed into the function as an argument\r\n     * @throws RangeError if the array variable is equal to the index given parameter passed into the function\r\n     * @param compareTo, index\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isNotEqualTo = function (compareTo, index) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \" please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue[index] === compareTo[index]) {\r\n            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthGreaterThan checks if the array variable length is greater than the parameter passed into the function as an argument\r\n     * @throws RangeError if the array is not greater than the parameter passed into the function\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthGreaterThan = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length < compareValue) {\r\n            throw new RangeError(this._variableName + \" should have a\\n            length greater than \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthNotGreaterThan checks if the array variable's length is not greater than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthNotGreaterThan = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length <= compareValue) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is not\r\n     * greater or equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthGreaterOrEqualTo = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length > compareValue || this._variableValue.length === compareValue) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthNotGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is not greater or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthNotGreaterOrEqualTo = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length > compareValue || this._variableValue.length === compareValue) {\r\n            throw new RangeError(this._variableName + \" should not have a\\n             length greater or equal to \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthLessThan checks if the array variable's length is less than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthLessThan = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length >= compareValue) {\r\n            throw new RangeError(this._variableName + \" should have a length less than \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthNotLessThan checks if the array variable's length is not less than the length of the contract precondition\r\n     * @throws RangeError if the array variable is less than or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthNotLessThan = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length <= compareValue) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        not less than \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthLessOrEqualThan checks if the array variable's length is less or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater than\r\n     * the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthLessOrEqualThan = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length > compareValue) {\r\n            throw new RangeError(this._variableName + \" should have a length less or equal\\n            to \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthNotLessOrEqualThan checks if the array variable's length is not less or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is less or equal than\r\n     * the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo is a number or another array\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.isLengthNotLessOrEqualThan = function (compareTo) {\r\n        var compareValue = 0;\r\n        compareValue = this.prepareArrayForLengthComparison(compareTo, compareValue);\r\n        if (this._variableValue.length <= compareValue) {\r\n            throw new RangeError(this._variableName + \" should not have a\\n             length less or equal to \" + compareValue + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * contains checks if the array variable's values contains one or more values\r\n     * with in the precondition of the TypedContract\r\n     * @throws RangeError if the array variable does not contain any of the values\r\n     *  passed into the instance of the TypedContract using the contains function\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.contains = function (compareTo) {\r\n        var _this = this;\r\n        var count = 0;\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n        }\r\n        var _loop_1 = function (i) {\r\n            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n                count++;\r\n            }\r\n        };\r\n        for (var i = 0; i < compareTo.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        if (count === 0) {\r\n            throw new RangeError(this._variableName + \" should contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * notContains checks if the array variable's values does not contain any values\r\n     * with in the precondition of the TypedContract\r\n     * @throws RangeError if the array variable does contain any of the values\r\n     *  passed into the instance of the TypedContract using the notContains function\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.notContains = function (compareTo) {\r\n        var _this = this;\r\n        var count = 0;\r\n        if (compareTo.length === 0 || this._variableValue.length === 0) {\r\n            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n        }\r\n        var _loop_2 = function (i) {\r\n            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n                count++;\r\n            }\r\n        };\r\n        for (var i = 0; i < compareTo.length; i++) {\r\n            _loop_2(i);\r\n        }\r\n        if (count > 0) {\r\n            throw new RangeError(this._variableName + \" should not contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        return this;\r\n    };\r\n    ArrayValidator.prototype.prepareArrayForLengthComparison = function (compareTo, compareValue) {\r\n        if (!this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the values length of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (compareTo instanceof Array) {\r\n            if (!compareTo.length) {\r\n                throw new RangeError(\"Can't compare the length of uninitialized arrays, \" +\r\n                    \"please append values to the array's in the instance of this TypedContract\");\r\n            }\r\n            compareValue = compareTo.length;\r\n        }\r\n        else {\r\n            compareValue = compareTo;\r\n        }\r\n        return compareValue;\r\n    };\r\n    return ArrayValidator;\r\n}(base_validator_1.BaseValidator));\r\nexports.ArrayValidator = ArrayValidator;\r\n//# sourceMappingURL=array-validator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/type-validators/array-validator.js\n// module id = 3\n// module chunks = 0","/// <reference path=\"type-validators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_validator_1 = require(\"./base-validator\");\r\nvar BooleanValidator = (function (_super) {\r\n    __extends(BooleanValidator, _super);\r\n    function BooleanValidator(variableValue, variableName) {\r\n        return _super.call(this, variableValue, variableName) || this;\r\n    }\r\n    /**\r\n     *\r\n     * isNull checks if the boolean variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     */\r\n    BooleanValidator.prototype.isNull = function () {\r\n        if (this._variableValue === null && typeof this._variableValue === \"object\") {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotNull checks if the boolean variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     */\r\n    BooleanValidator.prototype.isNotNull = function () {\r\n        if (this._variableValue == null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isDefined checks if the boolean variable is defined\r\n     * @throws a ReferenceError if the boolen variable is undefined\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isUndefined checks if the boolean variable is undefined\r\n     * @throws ReferenceError if the boolean variable is defined\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isNullOrUndefined checks if the boolean variable is not null or undefined\r\n     * @throws ReferenceError if the boolean variable is null or undefined\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isEqualTo checks if the boolean variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the boolean variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isEqualTo = function (compareTo) {\r\n        if (!this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the boolean variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotEqualTo checks if the boolean variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the boolean variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the boolean \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isTrue checks if the boolean variable is true\r\n     * @throws RangeError if the boolean variable is false\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isTrue = function () {\r\n        if (this._variableValue === false) {\r\n            throw new RangeError(this._variableName + \" should be true\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isFalse checks if the boolean variable is false\r\n     * @throws RangeError if the boolean variable is alse\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.isFalse = function () {\r\n        if (this._variableValue === true) {\r\n            throw new RangeError(this._variableName + \" should be false\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return BooleanValidator;\r\n}(base_validator_1.BaseValidator));\r\nexports.BooleanValidator = BooleanValidator;\r\n//# sourceMappingURL=boolean-validator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/type-validators/boolean-validator.js\n// module id = 4\n// module chunks = 0","/// <reference path=\"type-validators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_validator_1 = require(\"./base-validator\");\r\nvar NumberValidator = (function (_super) {\r\n    __extends(NumberValidator, _super);\r\n    function NumberValidator(variableValue, variableName) {\r\n        return _super.call(this, variableValue, variableName) || this;\r\n    }\r\n    /**\r\n     *\r\n     * isNotNull checks if the type number variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNull checks if the string variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isDefined checks if the number variable is defined\r\n     * @throws ReferenceError if the number variable jis not defined\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isUndefined checks if the number variable is undefined\r\n     * @throws a ReferenceError if the number variable is undefined\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isNullOrUndefined checks if the number variable is not null or undefined\r\n     * @throws ReferenceError if the number variable is null or undefined\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNullOrUndefined = function () {\r\n        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isEqualTo checks if the number variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isEqualTo = function (compareTo) {\r\n        if (this._variableValue !== compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the number variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotEqualTo checks if the number variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the number variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isGreaterThan checks if the number variable is not greater than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is less or equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isGreaterThan = function (compareTo) {\r\n        if (this._variableValue < compareTo) {\r\n            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotGreaterThan checks if the number variable is not greater to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotGreaterThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isGreaterOrEqualThan checks if the number variable is greater or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isGreaterOrEqualThan = function (compareTo) {\r\n        if (this._variableValue < compareTo) {\r\n            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotGreaterOrEqualThan checks if the number variable is not greater or equal than the\r\n     * parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal or greater than parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotGreaterOrEqualThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be greater or equal to \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLessThan checks if the number variable is less than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isLessThan = function (compareTo) {\r\n        if (this._variableValue >= compareTo) {\r\n            throw new RangeError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotLessThan checks if the number variable is not less than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotLessThan = function (compareTo) {\r\n        if (this._variableValue <= compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new ReferenceError(this._variableName + \" should be less or equal than \" + compareTo + \" but is \" + this._variableName);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue <= compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be less or equal\\n                 than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the variable passed into the TypedContract as a pre or post condition is between certain a range of values. The TypedContract will throw an error if the pre or post condition in the contract is not in the range as specified.\r\n     * @param startRange\r\n     * @param endRange\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.isBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the variable passed into the TypedContract as a pre or post condition is not in between certain a range of values. The TypedContract will throw an error if the pre or post condition in the contract is in the range as specified.\r\n     * @param startRange\r\n     * @param endRange\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.isNotBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return NumberValidator;\r\n}(base_validator_1.BaseValidator));\r\nexports.NumberValidator = NumberValidator;\r\n//# sourceMappingURL=number-validator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/type-validators/number-validator.js\n// module id = 5\n// module chunks = 0","/// <reference path=\"type-validators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_validator_1 = require(\"./base-validator\");\r\nvar StringValidator = (function (_super) {\r\n    __extends(StringValidator, _super);\r\n    function StringValidator(variableValue, variableName) {\r\n        return _super.call(this, variableValue, variableName) || this;\r\n    }\r\n    /**\r\n     *\r\n     * isNotNull checks if the string variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNull checks if the string variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isDefined checks if the string variable is defined\r\n     * @throws ReferenceError if the string is not defined\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isNotDefined checks if the string variable is not defined\r\n     * @throws ReferenceError if variable is defined\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isNullOrUndefined checks if a string variable is not null or undefined\r\n     * @throws ReferenceError if a string variable is null or not undefined\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isEqualTo cecks if the string variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isEqualTo = function (compareTo) {\r\n        if (this._variableValue !== compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the string variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotEqualTo checks if the string variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the string variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLessThan checks if the string variable is less than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isLessThan = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new ReferenceError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotLessThan checks if the string variable is not less than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not less than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isNotLessThan = function (compareTo) {\r\n        if (this._variableValue.length < compareTo.length) {\r\n            throw new ReferenceError(this._variableName + \" should not be less that \" + compareTo + \" but is \" + this._variableValue + \" \");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthGreaterThan checks if the string variable length is greater than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not greater than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isLengthGreaterThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length greater\\n            than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthGreaterOrEqualTo checks if the string variable length is greater or equal than\r\n     * to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not greater or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isLengthGreaterOrEqualTo = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthNotGreaterThan checks if the string variable length is not greater than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is less or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isLengthNotGreaterThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isLengthNotGreaterOrEqualTo checks if the string variable length is not greater or equal than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is greater or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isLengthNotGreaterOrEqualTo = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length greater or equal to \" + compareTo.length + \"\\n              but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isLengthLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.isLengthLessThan = function (compareTo) {\r\n        if (this._variableValue.length >= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isLengthNotLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.isLengthNotLessThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isLengthLessOrEqualThan checks if length of the string is less or equal than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater than the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.isLengthLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a\\n            length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * isLengthNotLessOrEqualThan checks if length of the string is not less or equal than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is less or equal than the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.isLengthNotLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length less\\n            or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * toMatch checks if the regular expression passed into the function matches the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param regExp\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.toMatch = function (regExp) {\r\n        if (!regExp.test(this._variableValue)) {\r\n            throw new RangeError(this._variableName + \" should match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" does not match\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * toNotMatch checks if the regular expression passed into the function does not match the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param regExp\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.toNotMatch = function (regExp) {\r\n        if (regExp.test(this._variableValue)) {\r\n            throw new RangeError(this._variableName + \" should not match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" matches\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * contains checks if the string passed into the function contains a match of the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does match the values in the precondition\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.contains = function (compareTo) {\r\n        if (this._variableValue.length === 0 && compareTo.length === 0) {\r\n            return this;\r\n        }\r\n        if (compareTo.length === 0 || this._variableValue.indexOf(compareTo) <= -1) {\r\n            throw new RangeError(this._variableName + \" should contain\\n           the pattern \" + compareTo + \" but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * notContains checks if the string passed into the function contains a match of the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.notContains = function (compareTo) {\r\n        if (this._variableValue.indexOf(compareTo) > -1) {\r\n            throw new RangeError(this._variableName + \" should not contain\\n           the pattern \" + compareTo + \" but the pattern is found in \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * startsWith checks if the precondition in the TypedContract has the same starting string\r\n     * value as the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract does not contain the same starting values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.startsWith = function (compareTo) {\r\n        if ((this._variableValue).lastIndexOf(compareTo, 0) === 0) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should start with \" + this._variableValue + \", but \" + compareTo + \" does not\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * notStartsWith checks if the precondition in the TypedContract does not have the same starting string\r\n     * value as the comparable variable passed into the function\r\n     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same starting values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.notStartsWith = function (compareTo) {\r\n        if ((this._variableValue).lastIndexOf(compareTo, 0) !== 0) {\r\n            throw new RangeError(this._variableName + \" should not start with \" + compareTo + \" but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * endsWith checks if the precondition in the TypedContract has the same ending string\r\n     * values as the comparable variable passed into the function\r\n     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same ending values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.endsWith = function (compareTo) {\r\n        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) === -1) {\r\n            throw new RangeError(this._variableName + \" should end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * notEndsWith checks if the precondition in the TypedContract does not have the same ending string\r\n     * values as the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract does contain the same ending values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.notEndsWith = function (compareTo) {\r\n        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) !== -1) {\r\n            throw new RangeError(this._variableName + \" should not end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isBetween checks if the precondition in the TypedContract is in between the starting and ending string range\r\n     * and are compared against the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract is not in between the\r\n     * starting and ending range\r\n     * @param startRange, endRange\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * isNotBetween checks if the precondition in the TypedContract is not in between the starting and ending string range\r\n     * and are compared against the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract is in between the\r\n     * starting and ending range\r\n     * @param startRange, endRange\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.isNotBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return StringValidator;\r\n}(base_validator_1.BaseValidator));\r\nexports.StringValidator = StringValidator;\r\n//# sourceMappingURL=string-validator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/type-validators/string-validator.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}