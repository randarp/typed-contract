{"version":3,"sources":["TypedContract/webpack:/webpack/universalModuleDefinition","TypedContract/webpack:/webpack/bootstrap 6b0090ed5d288ef03efe","TypedContract/webpack:/TypedContract/Contract/Contract.ts","TypedContract/webpack:/TypedContract/TypeValidators/StringValidator.js","TypedContract/webpack:/TypedContract/TypeValidators/BaseValidator.js","TypedContract/webpack:/TypedContract/TypeValidators/BooleanValidator.js","TypedContract/webpack:/TypedContract/TypeValidators/NumberValidator.js","TypedContract/webpack:/TypedContract/TypeValidators/ArrayValidator.js","TypedContract/webpack:/TypedContract/TypeValidators/AnyValidator.js","TypedContract/typedcontract-bootstrapper.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACtCA,2CAA0C;AAC1C,+DAA8D;;AAE9D,6CAAgC,CAAmC,CAAC;AACpE,8CAAiC,CAAoC,CAAC;AACtE,6CAAgC,CAAmC,CAAC;AACpE,4CAA+B,CAAkC,CAAC;AAClE,0CAA6B,CAAgC,CAAC;AAE9D;KAAA;KAsDA,CAAC;KA3CU,qBAAE,GAAT,UAAU,YAAgB,EAAE,IAAuB;SAAvB,oBAAuB,GAAvB,gBAAuB;SAE/C,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;aAC1F,MAAM,CAAC,IAAI,iCAAe,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SACnD,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;aAClG,MAAM,CAAC,IAAI,mCAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SACpD,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;aACjG,MAAM,CAAC,IAAI,iCAAe,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SACnD,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,YAAY,KAAK;aACpC,YAAY,YAAY,KAAK,KAAK,IAAI;gBACnC,YAAY,YAAY,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;aACjD,MAAM,CAAC,IAAI,+BAAc,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAClD,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,MAAM,CAAC,IAAI,2BAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAChD,CAAC;KACL,CAAC;KAYM,sBAAG,GAAV,UAAW,aAAiB,EAAE,IAAuB;SAAvB,oBAAuB,GAAvB,gBAAuB;SAEjD,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;aAC7F,MAAM,CAAC,IAAI,iCAAe,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACpD,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;aACrG,MAAM,CAAC,IAAI,mCAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACrD,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,SAAS,CAAC,CAAC,CAAC;aACpG,MAAM,CAAC,IAAI,iCAAe,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACpD,CAAC;SAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,YAAY,KAAK;aACrC,aAAa,YAAY,KAAK,KAAK,IAAI;aACvC,aAAa,YAAY,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;aAC/C,MAAM,CAAC,IAAI,+BAAc,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACnD,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,MAAM,CAAC,IAAI,2BAAY,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;SACjD,CAAC;KACL,CAAC;KACL,eAAC;AAAD,EAAC;AAtDY,iBAAQ,WAsDpB;AAED;;IAEG;AAEQ,iBAAQ,GAAoB,IAAI,QAAQ,EAAE,CAAC;;;;;;;ACrEtD;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA,4C;;;;;;AC7aA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA,0C;;;;;;AClCA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA,6C;;;;;;AC7IA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA,4C;;;;;;ACtQA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C,iDAAgD,yCAAyC,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,sBAAsB;AAC7C,iDAAgD,yCAAyC,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA,2C;;;;;;ACzUA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA,yC;ACnFA,uCAAuC;AACvC,2DAA2D;AAE3D,oBAAoB;AACpB,IAAI,QAAyB,CAAC;AAE9B,IAAI,aAAkB,CAAC;AAEvB,8EAA8E;AAC9E,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,aAAa,KAAK,WAAW,CAAC,CAAC,CAAC;IACpD,QAAQ,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC;AAC5C,CAAC;AACD,mBAAmB","file":"typedcontract.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"typedcontract\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"typedcontract\"] = factory();\n\telse\n\t\troot[\"typedcontract\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6b0090ed5d288ef03efe","/// <reference path=\"../IContract.d.ts\" />\r\n/// <reference path=\"../TypeValidators/TypeValidators.d.ts\" />\r\n\r\nimport { StringValidator } from \"../TypeValidators/StringValidator\";\r\nimport { BooleanValidator } from \"../TypeValidators/BooleanValidator\";\r\nimport { NumberValidator } from \"../TypeValidators/NumberValidator\";\r\nimport { ArrayValidator } from \"../TypeValidators/ArrayValidator\";\r\nimport { AnyValidator } from \"../TypeValidators/AnyValidator\";\r\n\r\nexport class Contract implements IContractStatic {\r\n    public In(precondition:string): IStringValidator;\r\n    public In(precondition:string, name:string): IStringValidator;\r\n    public In(precondition:boolean): IBooleanValidator;\r\n    public In(precondition:boolean, name:string): IBooleanValidator;\r\n    public In(precondition:number): INumberValidator;\r\n    public In(precondition:number, name:string): INumberValidator;\r\n    public In(precondition:any[]): IArrayValidator;\r\n    public In(precondition:any[], name:string): IArrayValidator;\r\n    public In(precondition:any, name:string): IAnyValidator;\r\n    public In(precondition:any): IAnyValidator;\r\n    public In(precondition:any, name:string = undefined):any {\r\n\r\n        if (typeof precondition === \"string\" || precondition === null || precondition === undefined) {\r\n            return new StringValidator(precondition, name);\r\n        } else if (typeof precondition === \"boolean\" || precondition === null || precondition === undefined) {\r\n            return new BooleanValidator(precondition, name);\r\n        } else if (typeof precondition === \"number\" || precondition === null || precondition === undefined) {\r\n            return new NumberValidator(precondition, name);\r\n        } else if (precondition instanceof Array ||\r\n            precondition instanceof Array === null\r\n            || precondition instanceof Array === undefined) {\r\n            return new ArrayValidator(precondition, name);\r\n        } else {\r\n            return new AnyValidator(precondition, name);\r\n        }\r\n    }\r\n\r\n    public Out(postcondition:string): IStringValidator;\r\n    public Out(postcondition:string, name:string): IStringValidator;\r\n    public Out(postcondition:boolean): IBooleanValidator;\r\n    public Out(postcondition:boolean, name:string): IBooleanValidator;\r\n    public Out(postcondition:number): INumberValidator;\r\n    public Out(postcondition:number, name:string): INumberValidator;\r\n    public Out(postcondition:any[]): IArrayValidator;\r\n    public Out(postcondition:any[], name:string): IArrayValidator;\r\n    public Out(postcondition:any, name:string): IAnyValidator;\r\n    public Out(postcondition:any):IAnyValidator;\r\n    public Out(postcondition:any, name:string = undefined):any {\r\n\r\n        if (typeof postcondition === \"string\" || postcondition === null || postcondition === undefined) {\r\n            return new StringValidator(postcondition, name);\r\n        } else if (typeof postcondition === \"boolean\" || postcondition === null || postcondition === undefined) {\r\n            return new BooleanValidator(postcondition, name);\r\n        } else if (typeof postcondition === \"number\" || postcondition === null || postcondition === undefined) {\r\n            return new NumberValidator(postcondition, name);\r\n        } else if (postcondition instanceof Array ||\r\n            postcondition instanceof Array === null ||\r\n            postcondition instanceof Array === undefined) {\r\n            return new ArrayValidator(postcondition, name);\r\n        } else {\r\n            return new AnyValidator(postcondition, name);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nCreate a module level variable that exposes the functionality for typed contract\r\n */\r\n\r\nexport var contract: IContractStatic = new Contract();\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./TypedContract/Contract/Contract.ts","/// <reference path=\"TypeValidators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar StringValidator = (function (_super) {\r\n    __extends(StringValidator, _super);\r\n    function StringValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNotNull checks if the string variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNull checks if the string variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the string variable is defined\r\n     * @throws ReferenceError if the string is not defined\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNotDefined checks if the string variable is not defined\r\n     * @throws ReferenceError if variable is defined\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if a string variable is not null or undefined\r\n     * @throws ReferenceError if a string variable is null or not undefined\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo cecks if the string variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsEqualTo = function (compareTo) {\r\n        if (this._variableValue !== compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the string variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the string variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the string variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLessThan checks if the string variable is less than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsLessThan = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new ReferenceError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotLessThan checks if the string variable is not less than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not less than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotLessThan = function (compareTo) {\r\n        if (this._variableValue.length < compareTo.length) {\r\n            throw new ReferenceError(this._variableName + \" should not be less that \" + compareTo + \" but is \" + this._variableValue + \" \");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterThan checks if the string variable length is greater than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not greater than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthGreaterThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length greater\\n            than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterOrEqualTo checks if the string variable length is greater or equal than\r\n     * to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is not greater or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthGreaterOrEqualTo = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterThan checks if the string variable length is not greater than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is less or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthNotGreaterThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterOrEqualTo checks if the string variable length is not greater or equal than to the parameter passed into the function as an argument\r\n     * @throws RangeError if the string variable is greater or equal than to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsLengthNotGreaterOrEqualTo = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length greater or equal to \" + compareTo.length + \"\\n              but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthLessThan = function (compareTo) {\r\n        if (this._variableValue.length >= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthNotLessThan checks if length of the string is less than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater or equal to the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthNotLessThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthLessOrEqualThan checks if length of the string is less or equal than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is greater than the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a\\n            length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsLengthNotLessOrEqualThan checks if length of the string is not less or equal than the comparable passed into the TypedContract\r\n     * @throws RangeError if the string length is less or equal than the comparable passed into the function\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     *\r\n     */\r\n    StringValidator.prototype.IsLengthNotLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a length less\\n            or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * ToMatch checks if the regular expression passed into the function matches the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param regExp\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.ToMatch = function (regExp) {\r\n        if (!regExp.test(this._variableValue)) {\r\n            throw new RangeError(this._variableName + \" should match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" does not match\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * ToNotMatch checks if the regular expression passed into the function does not match the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param regExp\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.ToNotMatch = function (regExp) {\r\n        if (regExp.test(this._variableValue)) {\r\n            throw new RangeError(this._variableName + \" should not match\\n            the pattern \" + regExp + \" but the value of \" + this._variableValue + \" matches\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * Contains checks if the string passed into the function contains a match of the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does match the values in the precondition\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.Contains = function (compareTo) {\r\n        if (this._variableValue.length === 0 && compareTo.length === 0) {\r\n            return this;\r\n        }\r\n        if (compareTo.length === 0 || this._variableValue.indexOf(compareTo) <= -1) {\r\n            throw new RangeError(this._variableName + \" should contain\\n           the pattern \" + compareTo + \" but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * NotContains checks if the string passed into the function contains a match of the string\r\n     * precondition in the TypedContract\r\n     * @throws RangeError if the regular expression does not match the values in the precondition\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.NotContains = function (compareTo) {\r\n        if (this._variableValue.indexOf(compareTo) > -1) {\r\n            throw new RangeError(this._variableName + \" should not contain\\n           the pattern \" + compareTo + \" but the pattern is found in \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * StartsWith checks if the precondition in the TypedContract has the same starting string\r\n     * value as the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract does not contain the same starting values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.StartsWith = function (compareTo) {\r\n        if ((this._variableValue).lastIndexOf(compareTo, 0) === 0) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should start with \" + this._variableValue + \", but \" + compareTo + \" does not\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * NotStartsWith checks if the precondition in the TypedContract does not have the same starting string\r\n     * value as the comparable variable passed into the function\r\n     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same starting values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.NotStartsWith = function (compareTo) {\r\n        if ((this._variableValue).lastIndexOf(compareTo, 0) !== 0) {\r\n            throw new RangeError(this._variableName + \" should not start with \" + compareTo + \" but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * EndsWith checks if the precondition in the TypedContract has the same ending string\r\n     * values as the comparable variable passed into the function\r\n     * @throws RangeError if the compareTo argument passed into TypedContract does not contain the same ending values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.EndsWith = function (compareTo) {\r\n        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) === -1) {\r\n            throw new RangeError(this._variableName + \" should end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * NotEndsWith checks if the precondition in the TypedContract does not have the same ending string\r\n     * values as the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract does contain the same ending values\r\n     * @param compareTo\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.NotEndsWith = function (compareTo) {\r\n        if ((this._variableValue).indexOf(compareTo, (this._variableValue).length - compareTo.length) !== -1) {\r\n            throw new RangeError(this._variableName + \" should not end with \" + compareTo + \", but \" + this._variableValue + \" does not\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsBetween checks if the precondition in the TypedContract is in between the starting and ending string range\r\n     * and are compared against the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract is not in between the\r\n     * starting and ending range\r\n     * @param startRange, endRange\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotBetween checks if the precondition in the TypedContract is not in between the starting and ending string range\r\n     * and are compared against the comparable variable passed into the function\r\n     * @throws RangeError if the comparable argument passed into TypedContract is in between the\r\n     * starting and ending range\r\n     * @param startRange, endRange\r\n     * @returns {IStringValidator}\r\n     */\r\n    StringValidator.prototype.IsNotBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return StringValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.StringValidator = StringValidator;\r\n//# sourceMappingURL=StringValidator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/TypeValidators/StringValidator.js\n// module id = 2\n// module chunks = 0","\"use strict\";\r\n/**\r\n * Encapsulates any validators that apply to every type and state used by the validation chain.\r\n */\r\nvar BaseValidator = (function () {\r\n    function BaseValidator(variableValue, variableName) {\r\n        var self = this;\r\n        self._variableValue = variableValue;\r\n        if (variableName && variableName.length > 0) {\r\n            self._variableName = variableName;\r\n        }\r\n        else {\r\n            self._variableName = \"The variable\";\r\n        }\r\n    }\r\n    /**\r\n     * Value returns the value that was passed into the contract\r\n     * @returns {T}\r\n     * @constructor\r\n     */\r\n    BaseValidator.prototype.Value = function () {\r\n        return this._variableValue;\r\n    };\r\n    /**\r\n     * Name returns the variable name that was passed into the contract\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    BaseValidator.prototype.Name = function () {\r\n        return this._variableName;\r\n    };\r\n    return BaseValidator;\r\n}());\r\nexports.BaseValidator = BaseValidator;\r\n//# sourceMappingURL=BaseValidator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/TypeValidators/BaseValidator.js\n// module id = 3\n// module chunks = 0","/// <reference path=\"TypeValidators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar BooleanValidator = (function (_super) {\r\n    __extends(BooleanValidator, _super);\r\n    function BooleanValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNull checks if the boolean variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     */\r\n    BooleanValidator.prototype.IsNull = function () {\r\n        if (this._variableValue === null && typeof this._variableValue === \"object\") {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotNull checks if the boolean variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     */\r\n    BooleanValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue == null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the boolean variable is defined\r\n     * @throws a ReferenceError if the boolen variable is undefined\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the boolean variable is undefined\r\n     * @throws ReferenceError if the boolean variable is defined\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the boolean variable is not null or undefined\r\n     * @throws ReferenceError if the boolean variable is null or undefined\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo checks if the boolean variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the boolean variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsEqualTo = function (compareTo) {\r\n        if (!this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the boolean variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the boolean variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the boolean variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the boolean \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsTrue checks if the boolean variable is true\r\n     * @throws RangeError if the boolean variable is false\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsTrue = function () {\r\n        if (this._variableValue === false) {\r\n            throw new RangeError(this._variableName + \" should be true\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsFalse checks if the boolean variable is false\r\n     * @throws RangeError if the boolean variable is alse\r\n     * @param compareTo\r\n     * @returns {IBooleanValidator}\r\n     */\r\n    BooleanValidator.prototype.IsFalse = function () {\r\n        if (this._variableValue === true) {\r\n            throw new RangeError(this._variableName + \" should be false\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return BooleanValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.BooleanValidator = BooleanValidator;\r\n//# sourceMappingURL=BooleanValidator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/TypeValidators/BooleanValidator.js\n// module id = 4\n// module chunks = 0","/// <reference path=\"TypeValidators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar NumberValidator = (function (_super) {\r\n    __extends(NumberValidator, _super);\r\n    function NumberValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNotNull checks if the type number variable is not null\r\n     * @throws a ReferenceError if the variable is null\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNull checks if the string variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the number variable is defined\r\n     * @throws ReferenceError if the number variable jis not defined\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the number variable is undefined\r\n     * @throws a ReferenceError if the number variable is undefined\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the number variable is not null or undefined\r\n     * @throws ReferenceError if the number variable is null or undefined\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo checks if the number variable is equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is not equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsEqualTo = function (compareTo) {\r\n        if (this._variableValue !== compareTo) {\r\n            throw new RangeError(this._variableName + \" should be equal to the number variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the number variable is not equal to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotEqualTo = function (compareTo) {\r\n        if (this._variableValue === compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be equal to the number variable \" + compareTo);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsGreaterThan checks if the number variable is not greater than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is less or equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsGreaterThan = function (compareTo) {\r\n        if (this._variableValue < compareTo) {\r\n            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotGreaterThan checks if the number variable is not greater to the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotGreaterThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsGreaterOrEqualThan checks if the number variable is greater or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsGreaterOrEqualThan = function (compareTo) {\r\n        if (this._variableValue < compareTo) {\r\n            throw new RangeError(this._variableName + \" should be greater than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotGreaterOrEqualThan checks if the number variable is not greater or equal than the\r\n     * parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is equal or greater than parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotGreaterOrEqualThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be greater or equal to \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLessThan checks if the number variable is less than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsLessThan = function (compareTo) {\r\n        if (this._variableValue >= compareTo) {\r\n            throw new RangeError(this._variableName + \" should be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotLessThan checks if the number variable is not less than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater to the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotLessThan = function (compareTo) {\r\n        if (this._variableValue <= compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be less than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue > compareTo) {\r\n            throw new ReferenceError(this._variableName + \" should be less or equal than \" + compareTo + \" but is \" + this._variableName);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotLessOrEqualThan checks if the number variable is less or equal than the parameter passed into the function as an argument\r\n     * @throws RangeError if the number variable is greater or equal than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns {INumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotLessOrEqualThan = function (compareTo) {\r\n        if (this._variableValue <= compareTo) {\r\n            throw new RangeError(this._variableName + \" should not be less or equal\\n                 than \" + compareTo + \" but is \" + this._variableValue);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the variable passed into the TypedContract as a pre or post condition is between certain a range of values. The TypedContract will throw an error if the pre or post condition in the contract is not in the range as specified.\r\n     * @param startRange\r\n     * @param endRange\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should be between\\n            \" + startRange + \" and \" + endRange + \", but the value of\\n            \" + this._variableValue + \" is not in that range\");\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the variable passed into the TypedContract as a pre or post condition is not in between certain a range of values. The TypedContract will throw an error if the pre or post condition in the contract is in the range as specified.\r\n     * @param startRange\r\n     * @param endRange\r\n     * @returns {NumberValidator}\r\n     */\r\n    NumberValidator.prototype.IsNotBetween = function (startRange, endRange) {\r\n        if (this._variableValue >= startRange && this._variableValue <= endRange) {\r\n            throw new RangeError(this._variableName + \" should not be between\\n            \" + startRange + \" and \" + endRange + \", but the value of \" + this._variableValue + \" is in that range\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return NumberValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.NumberValidator = NumberValidator;\r\n//# sourceMappingURL=NumberValidator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/TypeValidators/NumberValidator.js\n// module id = 5\n// module chunks = 0","/// <reference path=\"TypeValidators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar ArrayValidator = (function (_super) {\r\n    __extends(ArrayValidator, _super);\r\n    function ArrayValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNull Checks if the array variable is null\r\n     * @throws ReferenceError if the variable is not null\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotNull checks if the array variable is not null\r\n     * @throws ReferenceError if the variable is null\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the array variable is defined\r\n     * @throws ReferenceError if the array variable is undefined\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the array variable is undefined\r\n     * @throws ReferenceError if the array variable is defined\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsUndefined = function () {\r\n        if (this._variableValue !== undefined) {\r\n            throw new ReferenceError(this._variableName + \" should be undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the array variable is not null or undefined\r\n     * @throws ReferenceError if the array variable is null or undefined\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue !== null || typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsEqualTo checks if the array variable is equal to the index of the parameter passed into the function as an argument\r\n     * @throws RangeError if the array variable is not equal to the index given parameter passed into the function\r\n     * @param compareTo, index\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsEqualTo = function (compareTo, index) {\r\n        if (!compareTo.length || this._variableValue.length === 0) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue[index] !== compareTo[index]) {\r\n            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNotEqualTo checks if the array variable is not equal to the index of the parameter passed into the function as an argument\r\n     * @throws RangeError if the array variable is equal to the index given parameter passed into the function\r\n     * @param compareTo, index\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsNotEqualTo = function (compareTo, index) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \" please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue[index] === compareTo[index]) {\r\n            throw new RangeError(this._variableName + \" should be equal to array variable \" + compareTo + \" at the index \" + index);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterThan checks if the array variable length is greater than the parameter passed into the function as an argument\r\n     * @throws RangeError if the array is not greater than the parameter passed into the function\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthGreaterThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length < compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterThan checks if the array variable's length is not greater than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotGreaterThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should not have a\\n            length greater than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is not\r\n     * greater or equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthGreaterOrEqualTo = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            return this;\r\n        }\r\n        else {\r\n            throw new RangeError(this._variableName + \" should have a length\\n            greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotGreaterOrEqualTo checks if the array variable's length is greater or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is not greater or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotGreaterOrEqualTo = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays,\" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length > compareTo.length || this._variableValue.length === compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a\\n             length greater or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthLessThan checks if the array variable's length is less than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthLessThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length >= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotLessThan checks if the array variable's length is not less than the length of the contract precondition\r\n     * @throws RangeError if the array variable is less than or\r\n     * equal than the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotLessThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length\\n        not less than \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthLessOrEqualThan checks if the array variable's length is less or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is greater than\r\n     * the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthLessOrEqualThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length > compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should have a length less or equal\\n            to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsLengthNotLessOrEqualThan checks if the array variable's length is not less or equal than the length of the contract precondition\r\n     * @throws RangeError if the array variable is less or equal than\r\n     * the length of the precondition passed into the instance of the TypedContract\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.IsLengthNotLessOrEqualThan = function (compareTo) {\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"Can't compare the length's of uninitialized arrays, \" +\r\n                \"please append values to the array's in the instance of this TypedContract\");\r\n        }\r\n        if (this._variableValue.length <= compareTo.length) {\r\n            throw new RangeError(this._variableName + \" should not have a\\n             length less or equal to \" + compareTo.length + \" but is \" + this._variableValue.length);\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * Contains checks if the array variable's values contains one or more values\r\n     * with in the precondition of the TypedContract\r\n     * @throws RangeError if the array variable does not contain any of the values\r\n     *  passed into the instance of the TypedContract using the Contains function\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.Contains = function (compareTo) {\r\n        var _this = this;\r\n        var count = 0;\r\n        if (!compareTo.length || !this._variableValue.length) {\r\n            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n        }\r\n        for (var i = 0; i < compareTo.length; i++) {\r\n            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n                count++;\r\n            }\r\n        }\r\n        if (count === 0) {\r\n            throw new RangeError(this._variableName + \" should contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     *\r\n     * NotContains checks if the array variable's values does not contain any values\r\n     * with in the precondition of the TypedContract\r\n     * @throws RangeError if the array variable does contain any of the values\r\n     *  passed into the instance of the TypedContract using the NotContains function\r\n     * @param compareTo\r\n     * @returns { IArrayValidator }\r\n     */\r\n    ArrayValidator.prototype.NotContains = function (compareTo) {\r\n        var _this = this;\r\n        var count = 0;\r\n        if (compareTo.length === 0 || this._variableValue.length === 0) {\r\n            throw new RangeError(\"The length of either your contract precondition\\n            or comparable have a length of zero, please enter in values\");\r\n        }\r\n        for (var i = 0; i < compareTo.length; i++) {\r\n            if (compareTo.some(function (elem) { return _this._variableValue[i] === elem; })) {\r\n                count++;\r\n            }\r\n        }\r\n        if (count > 0) {\r\n            throw new RangeError(this._variableName + \" should not contain the pattern \" + compareTo + \"\\n             but the pattern is not found in \" + this._variableValue);\r\n        }\r\n        return this;\r\n    };\r\n    return ArrayValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.ArrayValidator = ArrayValidator;\r\n//# sourceMappingURL=ArrayValidator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/TypeValidators/ArrayValidator.js\n// module id = 6\n// module chunks = 0","/// <reference path=\"TypeValidators.d.ts\" />\r\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BaseValidator_1 = require(\"./BaseValidator\");\r\nvar AnyValidator = (function (_super) {\r\n    __extends(AnyValidator, _super);\r\n    function AnyValidator(variableValue, variableName) {\r\n        _super.call(this, variableValue, variableName);\r\n    }\r\n    /**\r\n     *\r\n     * IsNotNull checks if the type any variable is not null\r\n     * @throws a ReferenceError if the any is null\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.IsNotNull = function () {\r\n        if (this._variableValue === null) {\r\n            throw new ReferenceError(this._variableName + \" should not be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * IsNull checks if the any variable is null\r\n     * @throws a ReferenceError if the variable is not null\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.IsNull = function () {\r\n        if (this._variableValue !== null) {\r\n            throw new ReferenceError(this._variableName + \" should be null\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsDefined checks if the any variable is defined\r\n     * @throws ReferenceError if the any variable jis not defined\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.IsDefined = function () {\r\n        if (typeof this._variableValue === \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsUndefined checks if the any variable is undefined\r\n     * @throws a ReferenceError if the any variable is undefined\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.IsUndefined = function () {\r\n        if (typeof this._variableValue !== \"undefined\") {\r\n            throw new ReferenceError(this._variableName + \" should not be defined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    /**\r\n     * IsNullOrUndefined checks if the any variable is not null or undefined\r\n     * @throws ReferenceError if the any variable is null or undefined\r\n     * @returns { IAnyValidator }\r\n     */\r\n    AnyValidator.prototype.IsNullOrUndefined = function () {\r\n        if (this._variableValue === null || typeof this._variableValue === undefined) {\r\n            throw new ReferenceError(this._variableName + \" should not be null or undefined\");\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    };\r\n    return AnyValidator;\r\n}(BaseValidator_1.BaseValidator));\r\nexports.AnyValidator = AnyValidator;\r\n//# sourceMappingURL=AnyValidator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./TypedContract/TypeValidators/AnyValidator.js\n// module id = 7\n// module chunks = 0",null]}